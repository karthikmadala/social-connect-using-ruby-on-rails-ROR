<div id="comment-section-<%= post.id %>" class="mt-3" data-post-id="<%= post.id %>">
  <% post.comments.each do |comment| %>
    <div class="d-flex align-items-center justify-content-between mb-2">
      <div class="d-flex align-items-center">
        <% if comment.user.avatar.attached? %>
          <%= image_tag comment.user.avatar, class: "rounded-circle me-2", width: 30, height: 30 %>
        <% else %>
          <%= image_tag "default_avatar.png", class: "rounded-circle me-2", width: 30, height: 30 %>
        <% end %>
        <strong><%= link_to comment.user.email, profile_user_path(comment.user) %>:</strong>
        <span id="comment-content-<%= comment.id %>"><%= comment.content %></span>
        <% if comment.user == current_user %>
          <button class="btn btn-sm btn-link edit-comment-btn" data-comment-id="<%= comment.id %>">Edit</button>
        <% end %>

      </div>

      <% if comment.user == current_user %>
        <%= button_to "Delete", post_comment_path(post, comment), method: :delete, class: "btn btn-danger btn-sm", remote: true %>
      <% end %>
    </div>
  <% end %>

  <%= form_with model: [post, Comment.new], local: true, remote: true do |form| %>
    <div class="d-flex mt-2">
      <%= form.text_field :content, class: "form-control me-2", placeholder: "Write a comment..." %>
      <%= form.submit "Post", class: "btn btn-primary btn-sm" %>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.edit-comment-btn').forEach(button => {
      button.addEventListener('click', function() {
        const commentId = this.dataset.commentId;
        const commentContentElement = document.getElementById(`comment-content-${commentId}`);
        const currentContent = commentContentElement.textContent;
        const commentSection = button.closest('[data-post-id]');
        const postId = commentSection.dataset.postId;

        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentContent;
        input.classList.add('form-control', 'form-control-sm');

        const saveButton = document.createElement('button');
        saveButton.textContent = 'Save';
        saveButton.classList.add('btn', 'btn-sm', 'btn-success');

        const cancelButton = document.createElement('button');
        cancelButton.textContent = 'Cancel';
        cancelButton.classList.add('btn', 'btn-sm', 'btn-secondary');

        commentContentElement.replaceWith(input);
        this.replaceWith(saveButton);
        saveButton.after(cancelButton);

        saveButton.addEventListener('click', function() {
          const newContent = input.value;
          fetch(`/posts/${postId}/comments/${commentId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({ comment: { content: newContent } })
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              const newContentElement = document.createElement('span');
              newContentElement.id = `comment-content-${commentId}`;
              newContentElement.textContent = newContent;
              input.replaceWith(newContentElement);
              saveButton.remove();
              cancelButton.remove();
              button.style.display = 'inline';
            } else {
              alert('Failed to update comment.');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred: ' + error.message);
          });
        });

        cancelButton.addEventListener('click', function() {
          const newContentElement = document.createElement('span');
          newContentElement.id = `comment-content-${commentId}`;
          newContentElement.textContent = currentContent;
          input.replaceWith(newContentElement);
          saveButton.remove();
          cancelButton.remove();
          button.style.display = 'inline';
        });
      });
    });
  });
</script>